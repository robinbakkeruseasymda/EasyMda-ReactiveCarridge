package backend.slick;

import java.util.*;
import java.lang.reflect.*;
import java.lang.annotation.*;
import mda.type.*;
import flca.mda.api.util.*;
import flca.mda.codegen.helpers.*;
import reactive.*;

public class ScalaEntityDaoBase
{
  protected static String nl;
  public static synchronized ScalaEntityDaoBase create(String lineSeparator)
  {
    nl = lineSeparator;
    ScalaEntityDaoBase result = new ScalaEntityDaoBase();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = "/*" + NL + " * Generated via the com.flca generator" + NL + " */" + NL + "\t" + NL + "package ";
  protected final String TEXT_3 = ";" + NL + "\t";
  protected final String TEXT_4 = NL;
  protected final String TEXT_5 = NL + " " + NL + "/**" + NL + " generated class" + NL + "*/";
  protected final String TEXT_6 = NL + "case class ";
  protected final String TEXT_7 = "(";
  protected final String TEXT_8 = ") {" + NL + "}" + NL + "  ";
  protected final String TEXT_9 = " ";
  protected final String TEXT_10 = NL + NL + "//-- dao code " + NL + "trait ";
  protected final String TEXT_11 = " { this: Profile " + NL + "\t";
  protected final String TEXT_12 = NL + "\twith ";
  protected final String TEXT_13 = "  " + NL + "\t";
  protected final String TEXT_14 = " =>" + NL + "\timport profile.simple._" + NL + "  " + NL + "\tlazy val logger = LoggerFactory.getLogger(\"";
  protected final String TEXT_15 = ".";
  protected final String TEXT_16 = "\")" + NL + " \t" + NL + "\tclass ";
  protected final String TEXT_17 = "(tag: Tag) extends Table[";
  protected final String TEXT_18 = "](tag, \"";
  protected final String TEXT_19 = "\") {" + NL + "\t\t";
  protected final String TEXT_20 = NL + "\t\t";
  protected final String TEXT_21 = NL + "\t";
  protected final String TEXT_22 = NL + "\t\tdef * = (";
  protected final String TEXT_23 = ") <> (";
  protected final String TEXT_24 = ".tupled, ";
  protected final String TEXT_25 = ".unapply)";
  protected final String TEXT_26 = NL + "\t\tdef ";
  protected final String TEXT_27 = "FK = foreignKey(\"";
  protected final String TEXT_28 = "\", ";
  protected final String TEXT_29 = ", ";
  protected final String TEXT_30 = "Query)(_.";
  protected final String TEXT_31 = ")";
  protected final String TEXT_32 = NL + "\t}" + NL + "  " + NL + "\tval ";
  protected final String TEXT_33 = " = TableQuery[";
  protected final String TEXT_34 = "]" + NL + " ";
  protected final String TEXT_35 = NL + "\tdef ";
  protected final String TEXT_36 = "()(implicit session: Session): List[";
  protected final String TEXT_37 = "] = {" + NL + "\t\tval ";
  protected final String TEXT_38 = " = ";
  protected final String TEXT_39 = ".list" + NL + "\t\tfor (obj <- ";
  protected final String TEXT_40 = ") yield ";
  protected final String TEXT_41 = "(obj)" + NL + "\t}" + NL + " ";
  protected final String TEXT_42 = NL;
  protected final String TEXT_43 = NL + "\t" + NL + "\tdef delete";
  protected final String TEXT_44 = "(";
  protected final String TEXT_45 = ":";
  protected final String TEXT_46 = ")(implicit session: Session): Unit = {" + NL + "\t\tlogger.info(s\"delete ";
  protected final String TEXT_47 = " $";
  protected final String TEXT_48 = "\")";
  protected final String TEXT_49 = NL + "\t\tval deleteIds = for {" + NL + "\t\t\tobj <- ";
  protected final String TEXT_50 = "Query filter (_.";
  protected final String TEXT_51 = " === ";
  protected final String TEXT_52 = ") " + NL + "\t\t} yield obj.";
  protected final String TEXT_53 = NL + "\t\tdeleteIds foreach delete";
  protected final String TEXT_54 = NL + "\t  ";
  protected final String TEXT_55 = NL + "\t\t";
  protected final String TEXT_56 = " filter (_.";
  protected final String TEXT_57 = " === id) delete" + NL + "\t}" + NL + "\t";
  protected final String TEXT_58 = NL;
  protected final String TEXT_59 = NL + "  " + NL + "\t/**" + NL + "   * Fill in the last bits: ohc and fd, and eventually with non-generated setup code. " + NL + "   */  ";
  protected final String TEXT_60 = NL + "\tprivate def finish";
  protected final String TEXT_61 = "(obj:";
  protected final String TEXT_62 = ", fd:Option[";
  protected final String TEXT_63 = "]) : ";
  protected final String TEXT_64 = " = {" + NL + "\t\tval r = obj.copy";
  protected final String TEXT_65 = "(obj.id, fd)" + NL + "\t\tsetup";
  protected final String TEXT_66 = "(r)" + NL + "\t}";
  protected final String TEXT_67 = NL + "\tprivate def finish";
  protected final String TEXT_68 = "(obj:";
  protected final String TEXT_69 = ") : ";
  protected final String TEXT_70 = " = {" + NL + "\t\tsetup";
  protected final String TEXT_71 = "(obj)" + NL + "\t}";
  protected final String TEXT_72 = "\t";
  protected final String TEXT_73 = NL + "\tprivate def finish";
  protected final String TEXT_74 = "(obj:";
  protected final String TEXT_75 = "):";
  protected final String TEXT_76 = " = finish";
  protected final String TEXT_77 = "(obj, mapTo";
  protected final String TEXT_78 = "Row(obj))" + NL + "\t" + NL + "\tprivate def finish";
  protected final String TEXT_79 = "(obj:";
  protected final String TEXT_80 = ", baserow: ";
  protected final String TEXT_81 = "Row) : ";
  protected final String TEXT_82 = " = {" + NL + "\t\tval r = obj.copy";
  protected final String TEXT_83 = "(obj.id, obj.ofd)" + NL + "\t\tsetup";
  protected final String TEXT_84 = "(r)" + NL + "    }" + NL + "\t";
  protected final String TEXT_85 = "  " + NL + "" + NL + "  /**" + NL + "   * this is the last method called, before returning the object to the client. Use this method in ";
  protected final String TEXT_86 = "Dao to add specific initialization" + NL + "   */" + NL + "\tprotected def setup";
  protected final String TEXT_87 = "(obj:";
  protected final String TEXT_88 = "):";
  protected final String TEXT_89 = " = {" + NL + " \t\tobj" + NL + "\t}" + NL + "   ";
  protected final String TEXT_90 = NL + "\tprivate def is";
  protected final String TEXT_91 = "Dirty(obj:";
  protected final String TEXT_92 = "):Boolean = { obj.";
  protected final String TEXT_93 = " != null }";
  protected final String TEXT_94 = NL + "\tprivate def mustDelete";
  protected final String TEXT_95 = "(obj:";
  protected final String TEXT_96 = "):Boolean = { !obj.";
  protected final String TEXT_97 = ".isDefined && obj.";
  protected final String TEXT_98 = " != null }";
  protected final String TEXT_99 = NL + "  ";
  protected final String TEXT_100 = NL;
  protected final String TEXT_101 = NL;
  protected final String TEXT_102 = " " + NL + "\tprivate def insert";
  protected final String TEXT_103 = "(obj: ";
  protected final String TEXT_104 = ")(implicit session: Session) : ";
  protected final String TEXT_105 = " = {" + NL + "\t\tval row = ";
  protected final String TEXT_106 = "(obj)" + NL + "\t\tval newId:";
  protected final String TEXT_107 = " = ";
  protected final String TEXT_108 = " returning ";
  protected final String TEXT_109 = ".map(_.id) += row" + NL + "\t\tobj.copy";
  protected final String TEXT_110 = "(Some(newId))" + NL + "\t}";
  protected final String TEXT_111 = NL + "\tprivate def insert";
  protected final String TEXT_112 = "(obj: ";
  protected final String TEXT_113 = ")(implicit session: Session): ";
  protected final String TEXT_114 = " = {" + NL + "\t\tval row = ";
  protected final String TEXT_115 = "(obj)" + NL + "\t\tval newId: Long = ";
  protected final String TEXT_116 = " returning ";
  protected final String TEXT_117 = ".map(_.id) += row" + NL + "\t\trow.copy(Some(newId))" + NL + "\t}";
  protected final String TEXT_118 = NL + "\tprivate def insert";
  protected final String TEXT_119 = "(obj: ";
  protected final String TEXT_120 = ", newId:Option[Long])(implicit session: Session): ";
  protected final String TEXT_121 = " = {" + NL + "\t\tval row = ";
  protected final String TEXT_122 = "(obj, newId)" + NL + "\t\tval checkId: Long = ";
  protected final String TEXT_123 = " returning ";
  protected final String TEXT_124 = ".map(_.id) += row" + NL + "\t\t// assert that checkId == newId" + NL + "\t\tobj.copy";
  protected final String TEXT_125 = "(newId)" + NL + "\t}";
  protected final String TEXT_126 = NL + "\t";
  protected final String TEXT_127 = NL + "\tprivate def update";
  protected final String TEXT_128 = "(obj: ";
  protected final String TEXT_129 = ")(implicit session: Session): ";
  protected final String TEXT_130 = " = {" + NL + "\t\tval row = ";
  protected final String TEXT_131 = "(obj)" + NL + "\t\t";
  protected final String TEXT_132 = ".filter(_.id === row.id).update(row)" + NL + "\t\tobj" + NL + "\t}";
  protected final String TEXT_133 = NL + " \tprivate def update";
  protected final String TEXT_134 = "(obj: ";
  protected final String TEXT_135 = ")(implicit session: Session): ";
  protected final String TEXT_136 = " = {" + NL + "\t\tval row = ";
  protected final String TEXT_137 = "(obj)" + NL + "\t\t";
  protected final String TEXT_138 = ".filter(_.id === row.id).update(row)" + NL + "\t\trow" + NL + "\t}";
  protected final String TEXT_139 = " " + NL + "\tprivate def update";
  protected final String TEXT_140 = "(obj: ";
  protected final String TEXT_141 = ")(implicit session: Session): ";
  protected final String TEXT_142 = " = {" + NL + "\t\tval row = ";
  protected final String TEXT_143 = "(obj)" + NL + "\t\t";
  protected final String TEXT_144 = ".filter(_.id === row.id).update(row)" + NL + "\t\t// !?mapFromLoanRow(row)" + NL + "\t\tobj" + NL + "\t}";
  protected final String TEXT_145 = " " + NL + "\t";
  protected final String TEXT_146 = NL + NL + "\tdef ";
  protected final String TEXT_147 = "(row: ";
  protected final String TEXT_148 = ", newId:Option[";
  protected final String TEXT_149 = "]=None) : ";
  protected final String TEXT_150 = " = {" + NL + "\t\tval useId = if (newId.isDefined) newId else row.";
  protected final String TEXT_151 = NL + "\t\tval obj = new ";
  protected final String TEXT_152 = "(";
  protected final String TEXT_153 = "=useId)" + NL + "\t\t";
  protected final String TEXT_154 = NL + "\t\tobj.";
  protected final String TEXT_155 = " = row.";
  protected final String TEXT_156 = NL + "\t\tobj.";
  protected final String TEXT_157 = "Id = row.";
  protected final String TEXT_158 = NL + "  \t\tobj" + NL + "\t}" + NL;
  protected final String TEXT_159 = " " + NL + "\tdef ";
  protected final String TEXT_160 = "(row: ";
  protected final String TEXT_161 = ", newId: Option[";
  protected final String TEXT_162 = "] = None)(implicit session: Session): ";
  protected final String TEXT_163 = " = {" + NL + "\t\tval useId = if (newId.isDefined) newId else row.id" + NL + "" + NL + "\t\trow.";
  protected final String TEXT_164 = " match {";
  protected final String TEXT_165 = " ";
  protected final String TEXT_166 = NL + "\t\t\tcase \"";
  protected final String TEXT_167 = "\" => retrieve";
  protected final String TEXT_168 = "(row)";
  protected final String TEXT_169 = NL + "\t\t\tcase _ => null" + NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_170 = " " + NL + "" + NL + "\tdef ";
  protected final String TEXT_171 = "(row: ";
  protected final String TEXT_172 = ", newId:Option[";
  protected final String TEXT_173 = "]=None) : ";
  protected final String TEXT_174 = " = {" + NL + "\t\tval useId = if (newId.isDefined) newId else row.";
  protected final String TEXT_175 = NL + "\t\tval obj = new ";
  protected final String TEXT_176 = "(";
  protected final String TEXT_177 = "=useId)" + NL + "\t\t";
  protected final String TEXT_178 = NL + "  \t\tobj" + NL + "\t}" + NL + "\t";
  protected final String TEXT_179 = " " + NL + "" + NL + " ";
  protected final String TEXT_180 = NL + "\t" + NL + "\tprivate def ";
  protected final String TEXT_181 = "(obj: ";
  protected final String TEXT_182 = "): ";
  protected final String TEXT_183 = " = {";
  protected final String TEXT_184 = NL + "\t\t";
  protected final String TEXT_185 = NL + "\t\t";
  protected final String TEXT_186 = "(";
  protected final String TEXT_187 = " )" + NL + "\t} " + NL;
  protected final String TEXT_188 = NL + NL + "\tdef ";
  protected final String TEXT_189 = "(obj: ";
  protected final String TEXT_190 = ", id: Option[Long]=None): ";
  protected final String TEXT_191 = " = {" + NL + "\t\tval useid = if (id.isDefined) id else obj.id" + NL + "\t\t";
  protected final String TEXT_192 = "(useid, ";
  protected final String TEXT_193 = " )" + NL + "\t}" + NL;
  protected final String TEXT_194 = "\t";
  protected final String TEXT_195 = NL + NL + "\tdef ";
  protected final String TEXT_196 = "(obj: ";
  protected final String TEXT_197 = ", id: Option[Long]=None): ";
  protected final String TEXT_198 = " = {" + NL + "\t\tval useid = if (id.isDefined) id else obj.id" + NL + "\t\t";
  protected final String TEXT_199 = "(useid, ";
  protected final String TEXT_200 = " )" + NL + "\t}" + NL;
  protected final String TEXT_201 = NL + "  " + NL + "//--- retrieve and merge nested objects" + NL;
  protected final String TEXT_202 = NL;
  protected final String TEXT_203 = NL + NL + "\tprivate def deleteOneToManys(obj:";
  protected final String TEXT_204 = ")(implicit session: Session): ";
  protected final String TEXT_205 = " = {";
  protected final String TEXT_206 = NL + "\t\tval ";
  protected final String TEXT_207 = " = if (obj.isDirty) deleteOneToMany";
  protected final String TEXT_208 = "(";
  protected final String TEXT_209 = ") else obj";
  protected final String TEXT_210 = NL + "\t\t";
  protected final String TEXT_211 = NL + "\t}" + NL + "  ";
  protected final String TEXT_212 = NL + "\tprivate def deleteOneToMany";
  protected final String TEXT_213 = "(obj:";
  protected final String TEXT_214 = ")(implicit session: Session): ";
  protected final String TEXT_215 = " = {" + NL + "\t\tval oldIds = for {" + NL + "\t\t\t";
  protected final String TEXT_216 = " <- tstcQuery if ";
  protected final String TEXT_217 = ".tsta === obj.";
  protected final String TEXT_218 = NL + "\t\t} yield (";
  protected final String TEXT_219 = ".";
  protected final String TEXT_220 = ")" + NL + "\t\tval newIds:Set[";
  protected final String TEXT_221 = "] = obj.";
  protected final String TEXT_222 = ".map(_.";
  protected final String TEXT_223 = ".get)" + NL + "\t\toldIds.list.to[Set].diff(newIds).map((";
  protected final String TEXT_224 = ":";
  protected final String TEXT_225 = ") => delete";
  protected final String TEXT_226 = "(id))" + NL + "\t\tobj" + NL + "\t}" + NL + "  ";
  protected final String TEXT_227 = NL + "\t" + NL + "}";
  protected final String TEXT_228 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
     	// here we parse the input argument(s) and create the object JetArgument:arg and Object[]:args
	JetArgument arg = null;
	Object args[] = null;
	 
	if (argument != null) { 
		if (argument instanceof JetArgument) {
			arg = (JetArgument) argument;
		} else if (argument.getClass().isArray()) { 
			args = (Object[]) argument;
			if (args[0] instanceof JetArgument) {
				arg = (JetArgument) args[0];
			}
		}
	} 

     ScalaTypeUtils tu = new ScalaTypeUtils();
     NameUtils nu = new NameUtils();
     TemplateUtils tplu = new TemplateUtils();
     ScalaInterfaceUtils iu = new ScalaInterfaceUtils(); 
     AppUtils au = new AppUtils(); 
     Object element = arg.getElement(); 
     Class cc = element.getClass(); 
     String classname = nu.getCurrentClassname();
     String pck = nu.getCurrentPackage();
     String entity = tplu.getClassName(Tid.SCALA_ENTITY.name());
     String datastores = tplu.getClassName(Tid.SCALA_APP_DATASTORES.name());
     String datasource = tplu.getClassName(Tid.SCALA_SLICK_DATASOURCE.name());
     String uncapname = nu.uncapName(entity); 
     String idname = tu.getIdName(cc); String idtype = tu.getIdTypeName(); 
     String appName = au.getApplicationName(); 
     String appPck = au.getApplicationPackage();
     boolean isSubClass = tu.isSubClass(cc); 
     boolean isBaseClass = tu.isBaseClass(cc); 
     boolean isNormalClass = tu.isNormalClass(cc); 
     Class superClass = tu.getSuperClass(cc); //only valid when isSubClass 
     String superClassname = isSubClass ? superClass.getSimpleName() : ""; 
     List<Class<?>> subclasses = tu.getSubClasses(cc); 
     boolean isAbstract = tu.hasAbstractAnnotation(); 
     String fetchModel = tu.getFetchDepthTypeName(cc); 
     GetFieldsModus EXC = GetFieldsModus.EXCLUDE; 
     GetFieldsModus INC = GetFieldsModus.INCLUDE; 
     FwSelectType ID_FLD = FwSelectType.ID; 
     FwSelectType VAL_FLD = FwSelectType.VAL; 
     FwSelectType VAR_FLD = FwSelectType.VAR; 
     FwSelectType O2M_FLD = FwSelectType.ONETOMANY; 
     FwSelectType M2M_FLD = FwSelectType.MANYTOMANY; 
     FwSelectType M2O_FLD = FwSelectType.MANYTOONE; 
     FwSelectType O2O_FLD = FwSelectType.ONETOONE; 
     FwSelectType REL_FLD = FwSelectType.RELATIONS; 
     FwSelectType OFD_FLD = FwSelectType.OFD; 
     FwSelectType SPECIAL_FLD = FwSelectType.SPECIAL; 
     FwSelectType DISC_FLD = FwSelectType.DISCRIMINATOR; 
     FwSelectType SIMPLE_FLD = FwSelectType.SIMPLE; 
     FwSelectType ENUM_FLD = FwSelectType.ENUM; 
    stringBuffer.append(TEXT_1);
    stringBuffer.append(TEXT_2);
    stringBuffer.append(pck);
    stringBuffer.append(TEXT_3);
     	ImportUtils impu = new ImportUtils(); 
   	StringBuffer importStringBuffer = stringBuffer;
   	int importInsertionPoint = stringBuffer.length();
   	impu.addCompilationUnitImports(stringBuffer.toString()); 
 
     impu.addTemplateImport(Tid.SCALA_ROWMAPPERS.name());
     impu.addTemplateImport(Tid.SCALA_SLICK_PROFILE.name());
     impu.addScalaImport(entity + "Fd", cc, Tid.SCALA_ENTITY.name());
     impu.addImport("com.easymda.util.FetchDepth");
     impu.addImport("org.slf4j.LoggerFactory");
     impu.addImport("scala.language.postfixOps");
     impu.addImport(cc);
    stringBuffer.append(TEXT_4);
     String rowmapper = tplu.getClassName(Tid.SCALA_ROWMAPPERS.name()); 
     String row= entity + "Row"; String rows= entity + "Rows"; String query= nu.uncapName(entity) + "Query"; 
     String mapfromRow= "mapFrom" + row; String maptoRow= "mapTo" + row;
    stringBuffer.append(TEXT_5);
     String args1=tu.getRowCaseClassParams(cc); 
     String args2=tu.getRowCloneParams(cc); 
    stringBuffer.append(TEXT_6);
    stringBuffer.append(row);
    stringBuffer.append(TEXT_7);
    stringBuffer.append(args1);
    stringBuffer.append(TEXT_8);
     String withSubTraits = ""; 
     String discrim = ""; 
     Annotation discanno = tu.getAnnotation(cc, mda.annotation.jpa.DiscriminatorColumn.class);
    stringBuffer.append(TEXT_9);
     String discval = (discanno!=null) ? ((mda.annotation.jpa.DiscriminatorColumn) discanno).name() : "discriminator"; 
     if (isBaseClass) { 
        discrim = "def " + discval + " = column[String](\"" + discval + "\")"; 
        List<String> subclsNames = new ArrayList<String>(); 
        for (Class<?> subcls : subclasses) { 
           withSubTraits += " with " + tplu.getClassName(subcls, Tid.SCALA_ENTITY_DAO.name());  
        } 
     } else if (isSubClass) { 
        withSubTraits = " with " + tplu.getClassName(tu.getSuperClass(cc), Tid.SCALA_ENTITY_DAO.name());  
     } 
    stringBuffer.append(TEXT_10);
    stringBuffer.append(classname);
    stringBuffer.append(TEXT_11);
    stringBuffer.append(tu.getProfileMixins());
    stringBuffer.append(TEXT_12);
    stringBuffer.append(rowmapper);
    stringBuffer.append(TEXT_13);
    stringBuffer.append(withSubTraits);
    stringBuffer.append(TEXT_14);
    stringBuffer.append(pck);
    stringBuffer.append(TEXT_15);
    stringBuffer.append(classname);
    stringBuffer.append(TEXT_16);
    stringBuffer.append(rows);
    stringBuffer.append(TEXT_17);
    stringBuffer.append(row);
    stringBuffer.append(TEXT_18);
    stringBuffer.append(tu.getTableName());
    stringBuffer.append(TEXT_19);
    stringBuffer.append(tu.format(tu.getFieldsExc(cc, O2M_FLD, OFD_FLD), "%f<daoRowProperty()>", "\n\t\t"));
    stringBuffer.append(TEXT_20);
    stringBuffer.append(discrim);
    stringBuffer.append(TEXT_21);
     String args3=tu.getRowProjectionParams(cc); 
    stringBuffer.append(TEXT_22);
    stringBuffer.append(args3);
    stringBuffer.append(TEXT_23);
    stringBuffer.append(row);
    stringBuffer.append(TEXT_24);
    stringBuffer.append(row);
    stringBuffer.append(TEXT_25);
     for (Fw fieldwrapper : tu.getFieldsInc(cc, M2O_FLD)) { 
       ScalaFw fw = (ScalaFw) fieldwrapper; 
       Class ownerMappedBy = fw.getOwnerClassMappedByFkField();
     String fkqry = (fw.isSimple()) ? ((ownerMappedBy!=null)? ownerMappedBy.getSimpleName(): "???") : fw.type().getSimpleName(); 
     String fkname = (ownerMappedBy!=null) ? ownerMappedBy.getSimpleName() : fw.type().getSimpleName() + "_FK"; 
     String fkid = tu.getIdName(fw.type()); 
    stringBuffer.append(TEXT_26);
    stringBuffer.append(fw.name());
    stringBuffer.append(TEXT_27);
    stringBuffer.append(nu.capUpperCamel(fkname));
    stringBuffer.append(TEXT_28);
    stringBuffer.append(fw.rowFieldname());
    stringBuffer.append(TEXT_29);
    stringBuffer.append(nu.uncapName(fkqry));
    stringBuffer.append(TEXT_30);
    stringBuffer.append(fkid);
    stringBuffer.append(TEXT_31);
     } 
    stringBuffer.append(TEXT_32);
    stringBuffer.append(query);
    stringBuffer.append(TEXT_33);
    stringBuffer.append(rows);
    stringBuffer.append(TEXT_34);
      String findmethod = "find" + entity; 
    stringBuffer.append(TEXT_35);
    stringBuffer.append(findmethod);
    stringBuffer.append(TEXT_36);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_37);
    stringBuffer.append(rows);
    stringBuffer.append(TEXT_38);
    stringBuffer.append(query);
    stringBuffer.append(TEXT_39);
    stringBuffer.append(rows);
    stringBuffer.append(TEXT_40);
    stringBuffer.append(mapfromRow);
    stringBuffer.append(TEXT_41);
    stringBuffer.append(TEXT_42);
    stringBuffer.append( tu.include(backend.slick.ScalaEntityDaoBaseRetrieve.class, arg) );
    stringBuffer.append(TEXT_43);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_44);
    stringBuffer.append(idname);
    stringBuffer.append(TEXT_45);
    stringBuffer.append(idtype);
    stringBuffer.append(TEXT_46);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_47);
    stringBuffer.append(idname);
    stringBuffer.append(TEXT_48);
     for (Fw fw : tu.getFieldsInc(cc, O2M_FLD)) {
      String delIdname = tu.getIdName(fw.type()); 
     String delType = fw.genericTypeName(); 
     String fkname = (fw.hasMappedByFkField()) ? fw.getMappedByFkFieldName() : "?mappedby?"; 
    stringBuffer.append(TEXT_49);
    stringBuffer.append(nu.uncapName(delType));
    stringBuffer.append(TEXT_50);
    stringBuffer.append(fkname);
    stringBuffer.append(TEXT_51);
    stringBuffer.append(idname);
    stringBuffer.append(TEXT_52);
    stringBuffer.append(delIdname);
    stringBuffer.append(TEXT_53);
    stringBuffer.append(delType);
    stringBuffer.append(TEXT_54);
     } 
    stringBuffer.append(TEXT_55);
    stringBuffer.append(query);
    stringBuffer.append(TEXT_56);
    stringBuffer.append(idname);
    stringBuffer.append(TEXT_57);
    stringBuffer.append(TEXT_58);
    stringBuffer.append( tu.include(backend.slick.ScalaEntityDaoBaseSave.class, arg) );
    stringBuffer.append(TEXT_59);
     if (isNormalClass) { 
    stringBuffer.append(TEXT_60);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_61);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_62);
    stringBuffer.append(fetchModel);
    stringBuffer.append(TEXT_63);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_64);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_65);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_66);
     } else if (isBaseClass) { 
    stringBuffer.append(TEXT_67);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_68);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_69);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_70);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_71);
     } else { 
    stringBuffer.append(TEXT_72);
      String superClsname = tplu.getClassName(tu.getSuperClass(cc), Tid.SCALA_ENTITY.name()); 
    stringBuffer.append(TEXT_73);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_74);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_75);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_76);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_77);
    stringBuffer.append(superClsname);
    stringBuffer.append(TEXT_78);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_79);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_80);
    stringBuffer.append(superClsname);
    stringBuffer.append(TEXT_81);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_82);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_83);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_84);
     } 
    stringBuffer.append(TEXT_85);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_86);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_87);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_88);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_89);
     for (Fw fw : tu.getFieldsInc(cc, O2M_FLD)) {
     String fldname = nu.capName(fw.name()); String fldtype = fw.type().getSimpleName(); 
    stringBuffer.append(TEXT_90);
    stringBuffer.append(fldname);
    stringBuffer.append(TEXT_91);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_92);
    stringBuffer.append(fw.name());
    stringBuffer.append(TEXT_93);
     }  
     for (Fw fw : tu.getFieldsInc(cc, O2O_FLD)) { 
     String fldname = nu.capName(fw.name()); String fldtype = fw.type().getSimpleName(); 
    stringBuffer.append(TEXT_94);
    stringBuffer.append(fldname);
    stringBuffer.append(TEXT_95);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_96);
    stringBuffer.append(fw.name());
    stringBuffer.append(TEXT_97);
    stringBuffer.append(fw.name());
    stringBuffer.append(tu.ID_SUFFIX);
    stringBuffer.append(TEXT_98);
     }  
    stringBuffer.append(TEXT_99);
    stringBuffer.append(TEXT_100);
    stringBuffer.append( tu.makeIsFetchDefinedStr(cc));
    stringBuffer.append(TEXT_101);
     if (isNormalClass) { //-- insert 
    stringBuffer.append(TEXT_102);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_103);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_104);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_105);
    stringBuffer.append(maptoRow);
    stringBuffer.append(TEXT_106);
    stringBuffer.append(idtype);
    stringBuffer.append(TEXT_107);
    stringBuffer.append(query);
    stringBuffer.append(TEXT_108);
    stringBuffer.append(query);
    stringBuffer.append(TEXT_109);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_110);
     } else if (isBaseClass) { 
    stringBuffer.append(TEXT_111);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_112);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_113);
    stringBuffer.append(row);
    stringBuffer.append(TEXT_114);
    stringBuffer.append(maptoRow);
    stringBuffer.append(TEXT_115);
    stringBuffer.append(query);
    stringBuffer.append(TEXT_116);
    stringBuffer.append(query);
    stringBuffer.append(TEXT_117);
     } else { 
    stringBuffer.append(TEXT_118);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_119);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_120);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_121);
    stringBuffer.append(maptoRow);
    stringBuffer.append(TEXT_122);
    stringBuffer.append(query);
    stringBuffer.append(TEXT_123);
    stringBuffer.append(query);
    stringBuffer.append(TEXT_124);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_125);
     } //-- insert 
    stringBuffer.append(TEXT_126);
     if (isNormalClass) { //-- update 
    stringBuffer.append(TEXT_127);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_128);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_129);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_130);
    stringBuffer.append(maptoRow);
    stringBuffer.append(TEXT_131);
    stringBuffer.append(query);
    stringBuffer.append(TEXT_132);
     } else if (isBaseClass) { 
    stringBuffer.append(TEXT_133);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_134);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_135);
    stringBuffer.append(row);
    stringBuffer.append(TEXT_136);
    stringBuffer.append(maptoRow);
    stringBuffer.append(TEXT_137);
    stringBuffer.append(query);
    stringBuffer.append(TEXT_138);
     } else { 
    stringBuffer.append(TEXT_139);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_140);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_141);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_142);
    stringBuffer.append(maptoRow);
    stringBuffer.append(TEXT_143);
    stringBuffer.append(query);
    stringBuffer.append(TEXT_144);
     } //-- update 
    stringBuffer.append(TEXT_145);
     if (isNormalClass) { //-- mapfrom 
    stringBuffer.append(TEXT_146);
    stringBuffer.append(mapfromRow);
    stringBuffer.append(TEXT_147);
    stringBuffer.append(row);
    stringBuffer.append(TEXT_148);
    stringBuffer.append(idtype);
    stringBuffer.append(TEXT_149);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_150);
    stringBuffer.append(idname);
    stringBuffer.append(TEXT_151);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_152);
    stringBuffer.append(idname);
    stringBuffer.append(TEXT_153);
    stringBuffer.append(tu.format(tu.getFieldsExc(cc, VAL_FLD,REL_FLD), "obj.%n = %f<getFromRowMapper()>", "\n\t\t"));
     for (Fw fw : tu.getFieldsInc(cc, O2O_FLD, M2O_FLD)) { 
        if (fw.isSimple()) { 
    stringBuffer.append(TEXT_154);
    stringBuffer.append(fw.name());
    stringBuffer.append(TEXT_155);
    stringBuffer.append(fw.name());
        } else { 
    stringBuffer.append(TEXT_156);
    stringBuffer.append(fw.name());
    stringBuffer.append(TEXT_157);
    stringBuffer.append(fw.name());
        } 
     } 
    stringBuffer.append(TEXT_158);
     } else if (isBaseClass) { 
    stringBuffer.append(TEXT_159);
    stringBuffer.append(mapfromRow);
    stringBuffer.append(TEXT_160);
    stringBuffer.append(row);
    stringBuffer.append(TEXT_161);
    stringBuffer.append(idtype);
    stringBuffer.append(TEXT_162);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_163);
    stringBuffer.append(discval);
    stringBuffer.append(TEXT_164);
     for (Class subclz : subclasses) { 
        Annotation anno = tu.getAnnotation(subclz, mda.annotation.jpa.DiscriminatorValue.class);
    stringBuffer.append(TEXT_165);
        String discriminator = (anno==null) ? "?discriminator?" : ((mda.annotation.jpa.DiscriminatorValue) anno).value(); 
    stringBuffer.append(TEXT_166);
    stringBuffer.append(discriminator);
    stringBuffer.append(TEXT_167);
    stringBuffer.append(subclz.getSimpleName());
    stringBuffer.append(TEXT_168);
     } 
    stringBuffer.append(TEXT_169);
     } else { 
    stringBuffer.append(TEXT_170);
    stringBuffer.append(mapfromRow);
    stringBuffer.append(TEXT_171);
    stringBuffer.append(row);
    stringBuffer.append(TEXT_172);
    stringBuffer.append(idtype);
    stringBuffer.append(TEXT_173);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_174);
    stringBuffer.append(idname);
    stringBuffer.append(TEXT_175);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_176);
    stringBuffer.append(idname);
    stringBuffer.append(TEXT_177);
    stringBuffer.append(tu.format(tu.getFieldsExc(cc, VAL_FLD, REL_FLD), "obj.%n = %f<getFromRowMapper()>", "\n\t\t"));
    stringBuffer.append(TEXT_178);
     } //-- mapFrom 
    stringBuffer.append(TEXT_179);
     if (isNormalClass) { //-- mapTo 
    stringBuffer.append(TEXT_180);
    stringBuffer.append(maptoRow);
    stringBuffer.append(TEXT_181);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_182);
    stringBuffer.append(row);
    stringBuffer.append(TEXT_183);
     for (Fw fw : tu.getFieldsInc(cc, ENUM_FLD)) { 
     		Properties props = new Properties(); 
          props.put("P1", fw.name()); 
          String mapEnumStr = (fw.isRequired()) ? nu.substitute(tu.ENUMSTR_REQ, props) : nu.substitute(tu.ENUMSTR_OPT, props); 
    stringBuffer.append(TEXT_184);
    stringBuffer.append(mapEnumStr);
     } 
    stringBuffer.append(TEXT_185);
    stringBuffer.append(row);
    stringBuffer.append(TEXT_186);
    stringBuffer.append(tu.format(tu.getFieldsExc(cc, O2M_FLD, OFD_FLD), "%f<getToRowMapper()>", ",\n\t\t\t"));
    stringBuffer.append(TEXT_187);
     } else if (isSubClass) { 
    stringBuffer.append(TEXT_188);
    stringBuffer.append(maptoRow);
    stringBuffer.append(TEXT_189);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_190);
    stringBuffer.append(row);
    stringBuffer.append(TEXT_191);
    stringBuffer.append(row);
    stringBuffer.append(TEXT_192);
    stringBuffer.append(tu.format(tu.getFieldsExc(cc, O2M_FLD, OFD_FLD, ID_FLD), "%f<getToRowMapper()>", ",\n\t\t\t"));
    stringBuffer.append(TEXT_193);
     } else { //baseClass-- mapTo 
    stringBuffer.append(TEXT_194);
      String maptoParams = tu.format(tu.getFieldsExc(cc, O2M_FLD, OFD_FLD, ID_FLD), "%f<getToRowMapper()>", ",\n\t\t\t"); 
      maptoParams += ", obj." + discval; 
    stringBuffer.append(TEXT_195);
    stringBuffer.append(maptoRow);
    stringBuffer.append(TEXT_196);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_197);
    stringBuffer.append(row);
    stringBuffer.append(TEXT_198);
    stringBuffer.append(row);
    stringBuffer.append(TEXT_199);
    stringBuffer.append(maptoParams);
    stringBuffer.append(TEXT_200);
     } 
    stringBuffer.append(TEXT_201);
    stringBuffer.append(TEXT_202);
    stringBuffer.append(tu.genRetrieveAndMergeNestedObjects(cc));
    stringBuffer.append(TEXT_203);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_204);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_205);
     int n=0; 
     for (Fw fw : tu.getFieldsInc(cc, O2M_FLD)) {
      n++; String obj1 = "obj" + n; String obj2 = (n==1) ? "obj" : "obj" + (n-1); 
    stringBuffer.append(TEXT_206);
    stringBuffer.append(obj1);
    stringBuffer.append(TEXT_207);
    stringBuffer.append(nu.capName(fw.name()));
    stringBuffer.append(TEXT_208);
    stringBuffer.append(obj2);
    stringBuffer.append(TEXT_209);
     } 
     String retobj = (n > 0) ? "obj" + n : "obj"; 
    stringBuffer.append(TEXT_210);
    stringBuffer.append(retobj);
    stringBuffer.append(TEXT_211);
     for (Fw fw : tu.getFieldsInc(cc, O2M_FLD)) {
     String fldname = fw.name(); String fldtype = fw.genericTypeName(); 
	 String fldid = tu.getIdName(fw.type()); String fldidType = tu.getIdType(fw.type()).getSimpleName(); 
    stringBuffer.append(TEXT_212);
    stringBuffer.append(nu.capName(fldname));
    stringBuffer.append(TEXT_213);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_214);
    stringBuffer.append(entity);
    stringBuffer.append(TEXT_215);
    stringBuffer.append(fldname);
    stringBuffer.append(TEXT_216);
    stringBuffer.append(fldname);
    stringBuffer.append(TEXT_217);
    stringBuffer.append(idname);
    stringBuffer.append(TEXT_218);
    stringBuffer.append(fldname);
    stringBuffer.append(TEXT_219);
    stringBuffer.append(fldid);
    stringBuffer.append(TEXT_220);
    stringBuffer.append(fldidType);
    stringBuffer.append(TEXT_221);
    stringBuffer.append(fldname);
    stringBuffer.append(TEXT_222);
    stringBuffer.append(fldid);
    stringBuffer.append(TEXT_223);
    stringBuffer.append(fldid);
    stringBuffer.append(TEXT_224);
    stringBuffer.append(fldidType);
    stringBuffer.append(TEXT_225);
    stringBuffer.append(fldtype);
    stringBuffer.append(TEXT_226);
     } 
    stringBuffer.append(TEXT_227);
     importStringBuffer.insert(importInsertionPoint,  impu.computeSortedImports());
    stringBuffer.append(TEXT_228);
    return stringBuffer.toString();
  }
}
