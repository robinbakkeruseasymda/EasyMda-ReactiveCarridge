[ flex.datatype ]
* = Number
String = String
Boolean = Boolean
boolean = Boolean
Date = Date


[ flex.default-value ]
* = NaN
String = null
Boolean = false
boolean = false
Date = null

[ flex.pkType ]
* = Number
String = String

#------------------ Class + Dto ------------------- 

# see getSubsWithsForClass
# "uncapName", nu.uncapName(aField));
# "capName", nu.capName(aField));
# "type", getType(aField));
# "defValue", getDefaultValue(aField));

[ flex.class.properties ]

* = {{
	protected var _<%=uncapName%> : <%=type%> = <%=defValue%>;
}}

enum = {{
	protected var _<%=uncapName%> : String = null;
}}

one2many = {{
	protected var _<%=uncapName%> : ArrayCollection = new ArrayCollection();
}}


[ flex.class.getter-and-setter ]

* = {{
	public function get <%=uncapName%>() : <%=type%> {
		return get<%=capName%>();
	}
	public function get<%=capName%>() : <%=type%> {
			return _<%=uncapName%>;
	}

	public function set <%=uncapName%>(value : <%=type%>) : void {
		set<%=capName%>(value);
	}
	
	public function set<%=capName%>(value : <%=type%>) : void {
		_<%=uncapName%> = value;
	}
}}

enum = {{
	public function get <%=uncapName%>() : String {
		return get<%=capName%>();
	}
	public function get<%=capName%>() : String  {
			return _<%=uncapName%>;
	}

	public function set <%=uncapName%>(value : String) : void {
		set<%=capName%>(value);
	}
	public function set<%=capName%>(value : String) : void {
		_<%=uncapName%> = value;
	}
}}

one2many = {{
	/**
	 * @todo add comment for javadoc
	 */
	public function get <%=uncapName%>() : ArrayCollection {
		return get<%=capName%>();
	}
	public function get<%=capName%>() : ArrayCollection {
		if (_<%=uncapName%> == null) {
			_<%=uncapName%> = new ArrayCollection();        
		}

		return _<%=uncapName%>;
	}

	public function set <%=uncapName%>(value : ArrayCollection) : void {
		set<%=capName%>(value);
	}
	public function set<%=capName%>(value : ArrayCollection) : void {
		_<%=uncapName%> = value;
	}
	
	/**
	* Use this method to find out if corresponding set is not null
	*/
	public function get is<%=capName%>NotNull() : Boolean {
		return (this._<%=uncapName%> != null);
	}
	/**
	* Use this method to find out if corresponding set is null
	*/
	public function get is<%=capName%>Null() : Boolean {
		return (this._<%=uncapName%> == null);
	}

	/**
	 * Add a 
	 */
	public function add<%=capName%>(value : <%=type%>) : void {
		if (_<%=uncapName%> == null) {
			_<%=uncapName%> = new ArrayCollection();
		}
		if (value != null) {
			// TODO value.setParent(this);
			_<%=uncapName%>.addItem(value);
		}
	}
	/**
	 * Unassociate A from <%=type%>
	*/
	public function remove<%=capName%>(value : <%=type%>) : void {
		if (_<%=uncapName%> == null) return;
		var idx:int = _<%=uncapName%>.getItemIndex(value);
		if (idx >= 0) {
			_<%=uncapName%>.removeItemAt(idx);
		}
	}

}}

#------------------ Mxml tags ------------------- 
[ flex.form-fields ]
# see getSubsWithsForMxml
# "uncapName", nu.uncapName(aField));
# "capName", nu.capName(aField));
# "inputTag", getInputTag(aField));
# "label", getLabel(aField));
# "style", getStylename(aField));
# "maxchars", getMaxChars(aField));
# "restrict", getRestrict(aField));


* = {{
			<mx:FormItem label="{trl('<%=label%>')}">
			<<%=inputTag%> id="id<%=capName%>" styleName="<%=style%>" <%=maxchars%> <%=restrict%> />
			</mx:FormItem>
}}

enum = {{
			<mx:FormItem label="{trl('<%=label%>')}">
			<mx:ComboBox id="id<%=capName%>" prompt="{trl('Choose ...')}" />
			</mx:FormItem>
}}

many2one = {{
			<mx:FormItem label="{trl('<%=label%>')}">
				<cs:AssociationOneForm id="id<%=capName%>" />
			</mx:FormItem>
}}

one2many = {{
			<mx:FormItem label="{trl('<%=label%>')}">
				<cs:AssociationManyForm id="id<%=capName%>" />
			</mx:FormItem>
}}

[ flex.pk ]

generated = {{
		protected var _id : Number;
		
		public function getId() : Number {
			return _id;
		}

		public function setId(value : Number) : void {
			_id = value;
		}
		
		public function get id() : Number {
			return _id;
		}

		public function set id(value : Number) : void {
			_id = value;
		}
		
		public function get pkValue() : Number {
			return _id;
		}

		public function set pkValue(value : Number) : void {
			_id = value;
		}
}}

#------------------------------

# uncapName (property name)
# capName (property name)
# min           (new Integer(xx) or new BigDecimal(xx))   
# max          (new Integer(xx) or new BigDecimal(xx))     
# required     (true / false)                                     
# minChars

[ flex.validator.tag ]
string = <mx:StringValidator id="vld<%=capName%>" source="{id<%=capName%>}" property="text" <%=required%> enabled="false"/>
number = <mx:NumberValidator id="vld<%=capName%>" source="{id<%=capName%>}" property="text" <%=min%> <%=max%> <%=required%> enabled="false"/>
date = <mx:DateValidator id="vld<%=capName%>" source="{id<%=capName%>}" property="text" <%=min%> <%=max%> <%=required%> enabled="false"/>
enum = <mx:NumberValidator id="vld<%=capName%>" source="{id<%=capName%>}" lowerThanMinError="This field is required." property="selectedIndex" minValue="0" />


