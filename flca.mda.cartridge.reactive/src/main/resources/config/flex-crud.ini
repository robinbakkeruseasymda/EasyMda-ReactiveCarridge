#see getSubsWithsForCrudOper
# "entity", 
# "pkType", 
# "validator" 
# "dao", 
# "daoImpl", 
# "daosrvProp", 
# "mock", 
# "searchDto" 

#=============== FLEX ========================


[ flex.crud.service ]

save = {{
		function save<%=entity%>(value : <%=entity%> ,aResultHandler: Function, aFaultHandler: Function = null) : void;
}}

retrieve = {{
		function retrieve<%=entity%>(id : <%=pkType%> ,aResultHandler: Function, aFaultHandler: Function = null) : void;
}}

find_all = {{
		function findAll<%=entity%>(aResultHandler: Function, aFaultHandler: Function = null) : void ;
}}

remove = {{
		function remove<%=entity%>(id : <%=pkType%>, aResultHandler: Function, aFaultHandler: Function = null) : void ;
}}

search = {{
		function search<%=entity%>(args : <%=searchDto%>, aResultHandler: Function, aFaultHandler: Function = null) : void ;
}}

[ flex.crud.serviceImpl ]

save = {{
		public function save<%=entity%>(aValue:<%=entity%>, aResultHandler: Function, aFaultHandler: Function = null) : void {
			remoteObj.save<%=entity%>.addEventListener("result", aResultHandler);
			if (aFaultHandler != null) {
				remoteObj.addEventListener("fault", aFaultHandler);
			} else {
				remoteObj.addEventListener("fault", Application.application.handleFault);
			}			
			remoteObj.save<%=entity%>(aValue);
		}
		
}}

retrieve = {{
		public function retrieve<%=entity%>(id : <%=pkType%>, aResultHandler: Function, aFaultHandler: Function = null) : void {
			remoteObj.retrieve<%=entity%>.addEventListener("result", aResultHandler);
			if (aFaultHandler != null) {
				remoteObj.addEventListener("fault", aFaultHandler);
			} else {
				remoteObj.addEventListener("fault", Application.application.handleFault);
			}			
			remoteObj.retrieve<%=entity%>(id);
		}
		
}}

find_all = {{
		public function findAll<%=entity%>(aResultHandler: Function, aFaultHandler: Function = null) : void {
			remoteObj.findAll<%=entity%>.addEventListener("result", aResultHandler);
			if (aFaultHandler != null) {
				remoteObj.addEventListener("fault", aFaultHandler);
			} else {
				remoteObj.addEventListener("fault", Application.application.handleFault);
			}			
			remoteObj.findAll<%=entity%>();
		}
		
}}

remove = {{
		public function remove<%=entity%>(id : <%=pkType%>, aResultHandler: Function, aFaultHandler: Function = null) : void {
			remoteObj.remove<%=entity%>.addEventListener("result", aResultHandler);
			if (aFaultHandler != null) {
				remoteObj.addEventListener("fault", aFaultHandler);
			} else {
				remoteObj.addEventListener("fault", Application.application.handleFault);
			}			
			remoteObj.remove<%=entity%>(id);
		}
		
}}

search = {{
		public function search<%=entity%>(aValue:<%=searchDto%>, aResultHandler: Function, aFaultHandler: Function = null) : void {
			remoteObj.search<%=entity%>.addEventListener("result", aResultHandler);
			if (aFaultHandler != null) {
				remoteObj.addEventListener("fault", aFaultHandler);
			} else {
				remoteObj.addEventListener("fault", Application.application.handleFault);
			}			
			remoteObj.search<%=entity%>(aValue);
		}
		
}}


[ flex.crud.serviceMock ]

save = {{
		public function save<%=entity%>(aValue:<%=entity%>, aResultHandler: Function, aFaultHandler: Function = null) : void 
		{
			//<%=entity%>Mock.saveItem(aValue);
			var re:ResultEvent = new ResultEvent("mock", true, false, aValue);
			aResultHandler(re);
		}
		
}}

retrieve = {{
		public function retrieve<%=entity%>(id : <%=pkType%>, aResultHandler: Function, aFaultHandler: Function = null) : void 
		{
			var item:<%=entity%> = <%=entity%>Mock.makeOne(id);
			var re:ResultEvent = new ResultEvent("mock", true, false, item);
			aResultHandler(re);
		}
				
}}

find_all = {{
		public function findAll<%=entity%>(aResultHandler: Function, aFaultHandler: Function = null) : void 
		{
			var items:ArrayCollection = <%=entity%>Mock.makeMany(100);
			var re:ResultEvent = new ResultEvent("mock", true, false, items);
			aResultHandler(re);
		}
		
}}

remove = {{
		public function remove<%=entity%>(id : <%=pkType%>, aResultHandler: Function, aFaultHandler: Function = null) : void 
		{
			var re:ResultEvent = new ResultEvent("mock", true, false, null);
			aResultHandler(re);
		}
				
}}

search = {{
		public function search<%=entity%>(aValue:<%=searchDto%>, aResultHandler: Function, aFaultHandler: Function = null) : void 
		{
			var items:ArrayCollection = new ArrayCollection(); //TODO;
			var re:ResultEvent = new ResultEvent("mock", true, false, aValue);
			aResultHandler(re);
		}
		
}}

