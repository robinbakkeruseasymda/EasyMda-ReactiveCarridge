<%@ jet package="backend.app"	
imports="java.util.* java.lang.reflect.* mda.type.* flca.mda.api.util.*	flca.mda.codegen.helpers.* reactive.* "
class="ApplicationConfig" %>
<%@ include file="../jet-includes/java-class-init.jetinc" %>
<%@ include file="../jet-includes/java-start-class.jetinc" %>

<% impu.addImport("com.typesafe.config.Config");%>
<% impu.addImport("com.typesafe.config.ConfigFactory");%>
<% impu.addImport("org.slf4j.LoggerFactory");%>
	
object <%=classname%> {
				
	lazy val logger = LoggerFactory.getLogger(<%=classname%>.getClass.getName())
			
	//constants being uses in application.conf
	val APP_NAME = "easymda-reactive"
	val MODUS = "mode"
	val RUN_MODUS = "run." + MODUS
	val DROP_TABLES = "tables.drop"
	val CREATE_TABLES = "tables.create"
	val POPULATE_TABLES = "tables.populate" 
	val DATASOURCE = "datasource"	
	
	val conf = ConfigFactory.load
	logger.info(s"*** running in ${runMode()} mode ******************")
	 
	def runMode():String = if (conf.hasPath(RUN_MODUS)) conf.getString(RUN_MODUS) else "PROD"
	def dropTables():Boolean = datasourceFlag(DROP_TABLES)
	def createTables():Boolean = datasourceFlag(CREATE_TABLES)
	def populateTables():Boolean = datasourceFlag(POPULATE_TABLES)
	
	private def datasourceFlag(suffix:String):Boolean = {
		val key = MODUS + "." + runMode + "." + DATASOURCE + "." + suffix	
		println(key)
		if (conf.hasPath(key)) {
			return conf.getBoolean(key)
		}	else false
	}
}
<% importStringBuffer.insert(importInsertionPoint,	impu.computeSortedImports());%>
