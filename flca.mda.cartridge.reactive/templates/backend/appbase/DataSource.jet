<%@ jet package="backend.app"  
imports="java.util.* java.lang.reflect.* mda.type.* flca.mda.api.util.*  flca.mda.codegen.helpers.* reactive.* "
class="DataSource" %>
<%@ include file="../jet-includes/java-class-init.jetinc" %>
<%@ include file="../jet-includes/java-start-class.jetinc" %>

<% impu.addImport("com.typesafe.config.Config");%>
<% impu.addImport("com.typesafe.config.ConfigFactory");%>
<% impu.addImport("scala.slick.driver.JdbcProfile");%>
<% impu.addImport("scala.slick.driver.H2Driver");%>
<% impu.addImport("scala.slick.driver.SQLiteDriver");%>
<% impu.addImport("com.jolbox.bonecp.BoneCPDataSource");%>
<% impu.addImport("scala.slick.driver.JdbcDriver");%>
<% String appcfg = tplu.getAppClassName(Tid.SCALA_APP_CONFIG.name());%>	

object <%=classname%> {

  lazy val dbType = "h2"
    
  lazy val datasource = {
    val conf = ConfigFactory.load

    val dbsCfg = datasourceConfig()
    val dbUrl = dbsCfg.getString("dburl")
    val driver = dbsCfg.getString("driver")
    val dbuser = dbsCfg.getString("user")
    val dbpwd = dbsCfg.getString("pwd")

    val ds = new BoneCPDataSource
    ds.setDriverClass(driver)
    ds.setJdbcUrl(dbUrl)
    ds.setAcquireIncrement(5)
    ds.setUsername(dbuser)
    ds.setPassword(dbpwd)
    ds
  }
  
  def datasourceConfig() = {
    val conf = ConfigFactory.load()
    val mode = <%=appcfg%>.runMode
    val dskey = <%=appcfg%>.MODUS + "." + mode + "." + <%=appcfg%>.DATASOURCE
    println(s"mode = $mode getting values from: $dskey")
    conf.getConfig(dskey)
  }
  
  def driver: JdbcDriver =
    dbType match {
      case "h2" => H2Driver
      case "sql-lite" => SQLiteDriver
      case _ => throw new IllegalArgumentException("dbType property must be either h2 o sql-lite")
    }
}
<% importStringBuffer.insert(importInsertionPoint,  impu.computeSortedImports());%>
